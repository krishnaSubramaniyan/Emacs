* User Interface
** Hide menubar
#+begin_src emacs-lisp
  (menu-bar-mode 0)
#+end_src
** Hide Toolbar and Scrollbar
#+begin_src emacs-lisp
  (tool-bar-mode 0)
  (scroll-bar-mode 0)
#+end_src
** No inhibit startup message
#+begin_src emacs-lisp
  (setq inhibit-startup-screen t)
#+end_src
** set number
#+begin_src emacs-lisp
  (column-number-mode)
  (global-display-line-numbers-mode t)
#+end_src
** Themes
#+begin_src emacs-lisp
  ;;(load-theme 'wombat t)
#+end_src
** Font Configuration
#+begin_src emacs-lisp
  (set-face-attribute 'default nil :font "Ubuntu Sans Mono" :weight 'light :height 230)
#+end_src
** Cursor
#+begin_src emacs-lisp
(setq-default cursor-type 'bar)
#+end_src
* Behavior
** Mute beep sound
#+begin_src emacs-lisp
  (setq ring-bell-function 'ignore)
#+end_src
** No (Backup, Lock, Autosave)
#+begin_src emacs-lisp
  (setq
   make-backup-files nil
   auto-save-default nil
   create-lockfiles nil)
#+end_src
** Y or N instead of Yes or No
#+begin_src emacs-lisp
  (fset 'yes-or-no-p 'y-or-n-p)
#+end_src
** Electric auto pair mode
#+begin_src emacs-lisp
  (electric-pair-mode 1)
#+end_src
** Auto revert
#+begin_src emacs-lisp
  ;;all files
  (global-auto-revert-mode 1)

  ;;dired buffers
  (setq global-auto-revert-non-file-buffers t)

  ;;enable verbose
  (setq auto-revert-verbose t)
#+end_src
** Registers
#+begin_src emacs-lisp
  (set-register ?E '(file . "~/.emacs.d/config.org"))
  (set-register ?I '(file . "~/.config/i3/config"))
  (set-register ?P '(file . "~/Git/CompetetiveProgramming/run.py"))
#+end_src
** Buffers
*** Buffer switching
#+begin_src emacs-lisp
  (global-set-key [(meta shift j)] 'previous-buffer)
  (global-set-key [(meta shift l)] 'next-buffer)
#+end_src
*** Buffer kill
#+begin_src emacs-lisp
  (global-set-key (kbd "C-x K") 'kill-this-buffer)
#+end_src
*** Save buffers kill terminal
#+begin_src emacs-lisp
  (global-set-key (kbd "C-q") 'save-buffers-kill-terminal)
#+end_src
*** IBuffers
#+begin_src emacs-lisp
  ;; (setq ibuffer-filter-groups
  ;;       '(
  ;; 	("Emacs"
  ;; 	 (name . "^\\*scratch\\*$")
  ;; 	 (name . "^\\*Messages\\*$"))
  ;; 	("Java"  (mode . "java-mode"))
  ;; 	("Dired" (mode . "dired-mode"))
  ;; 	("Other" (".*"))
  ;; 	)
  ;;  )
#+end_src
** KeyBinds
*** Compile
#+begin_src emacs-lisp
  (global-set-key (kbd "C-c c") 'compile)
#+End_src
*** IBuffer
#+begin_src emacs-lisp
  (global-set-key (kbd "C-x C-b") 'ibuffer)
#+end_src
*** Random-load-theme
#+begin_src emacs-lisp
  (global-set-key (kbd "C-c t") 'load-random-theme)
#+end_src
*** Eshell
#+begin_src emacs-lisp
  (global-set-key (kbd "C-c e") 'eshell)
#+end_src
** Dired
#+begin_src emacs-lisp
  (use-package dired
    :ensure nil
    :hook (dired-mode . dired-hide-details-mode)
    :config
    (setq dired-listing-switches "-agho --group-directories-first")
    (setq dired-kill-when-opening-new-dired-buffer t)

    (setq dired-recursive-deletes 'always)
    (setq dired-recursive-copies 'always)
  )
#+end_src
* Use package
** Installation
#+begin_src emacs-lisp
(require 'package)

(setq package-archives '(("melpa" . "https://melpa.org/packages/")
			("org" . "https://orgmode.org/elpa/")
			("elpa" . "https://elpa.gnu.org/packages/")))

(package-initialize)
(unless package-archive-contents
  (package-refresh-contents))

;; Initialize use package on non-linux based system
(unless (package-installed-p 'use-package)
  (package-install 'use-package))

(require 'use-package)
(setq use-package-always-ensure t)
#+end_src
* Third party packages
** Nerd icons
#+begin_src emacs-lisp
  (use-package nerd-icons)
#+end_src
** DOOM
*** DOOM theme
#+begin_src emacs-lisp
  (use-package doom-themes)
#+end_src
*** DOOM modeline(statusBar)
#+begin_src emacs-lisp
  (use-package doom-modeline
    :init (doom-modeline-mode 1)
    :config
    ;;set height
    (setq doom-modeline-height 40)
    ;;set width
    (setq doom-modeline-bar-width 10)
    ;;disable hud
    (setq doom-modeline-hud nil)
    ;;window width
    (setq doom-modeline-window-width-limit 100)
    )
#+end_src
** Which Key 
# which key is show possible keys
#+begin_src emacs-lisp
  (use-package which-key
  :init (which-key-mode)
  :diminish which-key-mode
  :config
  (setq which-key-idle-delay 0.6))
#+End_Src
** Vertico
# Vertico is show available option
#+begin_src emacs-lisp
  ;; Enable vertico
  (use-package vertico
    :init
    (vertico-mode)

    ;; Different scroll margin
    ;; (setq vertico-scroll-margin 0)

    ;; Show more candidates
    ;; (setq vertico-count 20)

    ;; Grow and shrink the Vertico minibuffer
    ;; (setq vertico-resize t)

    ;; Optionally enable cycling for `vertico-next' and `vertico-previous'.
    (setq vertico-cycle t)
    )

  ;; Persist history over Emacs restarts. Vertico sorts by history position.
  (use-package savehist
    :init
    (savehist-mode))

  ;; Optionally use the `orderless' completion style.
  (use-package orderless
    :init
    ;; Configure a custom style dispatcher (see the Consult wiki)
    ;; (setq orderless-style-dispatchers '(+orderless-consult-dispatch orderless-affix-dispatch)
    ;;       orderless-component-separator #'orderless-escapable-split-on-space)
    (setq completion-styles '(orderless basic)
	  completion-category-defaults nil
	  completion-category-overrides '((file (styles partial-completion)))))

  ;; Enable rich annotations using the Marginalia package
  (use-package marginalia
    ;; Bind `marginalia-cycle' locally in the minibuffer.  To make the binding
    ;; available in the *Completions* buffer, add it to the
    ;; `completion-list-mode-map'.
    :bind (:map minibuffer-local-map
	   ("M-A" . marginalia-cycle))

    ;; The :init section is always executed.
    :init

    ;; Marginalia must be activated in the :init section of use-package such that
    ;; the mode gets enabled right away. Note that this forces loading the
    ;; package.
    (marginalia-mode))
#+end_src
** Rainbow delimiter 
# rainbow delimiter is color a border make diffrence
#+begin_src emacs-lisp
  (use-package rainbow-delimiters
    :hook (prog-mode . rainbow-delimiters-mode))
#+end_src
** Emmet-mode
# HTML,CSS package
#+begin_src emacs-lisp
  ;; (require 'emmet-mode)
  ;; ;; Enable emmet-mode in HTML and CSS
  ;; (add-hook 'html-mode-hook #'emmet-mode)
  ;; (add-hook 'css-mode-hook #'emmet-mode)
  ;; ;; Optional: Configure emmet-mode (e.g., JSX className)
  ;; (setq emmet-expand-jsx-className? t)
#+end_src
** Org Presentation
# using ox-reveal and htmlize
#+begin_src emacs-lisp
  ;; (use-package ox-reveal)
  ;; (use-package htmlize)
  ;; (setq org-reveal-root "https://cdn.jsdelivr.net/npm/reveal.js") 
#+end_src
* My Functions
** Load-random-theme
#+begin_src emacs-lisp
  ;;theme list
  (defvar themes
    '(
      doom-solarized-dark-high-contrast
      doom-gruvbox
      doom-dark+
      doom-Iosvkem
      doom-nord-aurora
      doom-tokyo-night
      doom-material
      doom-dracula
      doom-palenight)
    )

  ;; function declaretion
  (defun load-random-theme()
    (interactive)
    (let ( (randomTheme (nth (random (length themes)) themes)) )
      ;;disable previous theme
      (mapc #'disable-theme custom-enabled-themes)
      (load-theme randomTheme t)
      (message "Loading theme %s" randomTheme)
    )
  )

  ;; function call
  (load-random-theme)
#+end_src
** Disable lineNumber specific buffers
#+begin_src emacs-lisp
  (add-hook 'after-change-major-mode-hook
	    (lambda ()
	      (when (or
		     (string-prefix-p "*scratch*" (buffer-name))
		     (string-prefix-p "*compilation*" (buffer-name))
		     (string-prefix-p "*eshell*" (buffer-name))
		    )
		(display-line-numbers-mode 0)
	      )
	    )
  )
#+end_src
